{"version":3,"sources":["utils/courses.js","welcome_page/index.jsx","index.jsx","res/icon.svg","res/calendar-step-1.png","res/calendar-step-2.png"],"names":["getCourseCode","classInfo","undefined","subject","catalog_number","snackbarWarningText","theme","createMuiTheme","palette","primary","main","pink","dark","light","WelcomePage","props","validate","nameFromCode","originalName","sortedUniqueNameFromCode","_","uniq","sort","sortedOriginalCode","isEqual","setState","dialogOpen","console","log","showSnackbar","loadCourseInfo","courseCodes","courseNames","fullPageOverlayOpen","instance","axios","create","baseURL","timeout","promises","map","code","get","params","key","all","then","values","subjectNamsFromCourseCodes","value","data","info","includes","catch","error","message","parseCourses","rawCourses","classNumbers","match","x","substring","length","parseInt","snackbarTheme","snackbarText","snackbarOpen","hideSnackbar","event","reason","handleDialogClose","handleRawCoursesInputChange","handleNextStepClick","state","handleEmailAddressChange","val","questId","handleSubmitClick","post","id","sections","response","handlePaste","this","ThemeProvider","Box","p","CssBaseline","Snackbar","open","onClose","anchorOrigin","vertical","horizontal","Alert","severity","src","logo","alt","className","Grid","container","justify","spacing","item","xs","md","lg","Card","raised","CardHeader","title","CardContent","Typography","variant","Link","href","target","CardMedia","image","step1","style","display","flexDirection","height","step2","flexGrow","paddingBottom","mb","TextField","onPaste","e","clipboardData","getData","multiline","required","fullWidth","rows","onChange","InputProps","inputProps","Backdrop","zIndex","drawer","color","CircularProgress","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","autoFocus","margin","label","endAdornment","InputAdornment","position","DialogActions","Button","onClick","React","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.450d4b44.chunk.js","sourcesContent":["import _ from 'lodash';\n\n/**\n * @typedef {{ courseCode: string, keepable: boolean, keep: boolean }} CurrentCourse\n */\n\n/**\n * @typedef {Object} ClassInfo\n * @property {string} subject\n * @property {number} catalog_number\n * @property {number} class_number\n * @property {number} associated_class\n * @property {string} section\n * @property {string} campus\n * @property {ClassTimeInfo[]} classes\n */\n\n/**\n * @typedef {Object} ClassTimeInfo\n * @property {ClassDate} date\n * @property {{building: string, room: string}} location\n * @property {string[]} instructors\n*/\n\n/**\n * @typedef {Object} ClassDate\n * @property {string} start_time\n * @property {string} end_time\n * @property {string} weekdays\n * @property {boolean} is_tba\n * @property {boolean} is_cancelled\n * @property {boolean} is_closed\n */\n\n/**\n * Determines whether two classes are associated.\n * @param {ClassInfo} classInfo1 the ClassInfo object to compare.\n * @param {ClassInfo} classInfo2 the other ClassInfo object to compare.\n */\nconst areAssociated = (classInfo1, classInfo2) => (\n  classInfo1.associated_class === classInfo2.associated_class\n);\n\n/**\n * Returns the course code of a class.\n * @param {ClassInfo} classInfo the ClassInfo object to get course code from.\n */\nconst getCourseCode = (classInfo) => (classInfo === undefined ? null : `${classInfo.subject} ${classInfo.catalog_number}`);\n\n/**\n * Determines whether a class in online or not.\n * @param {ClassInfo} classInfo the ClassInfo object to check.\n */\nconst isOnline = (classInfo) => classInfo.campus === 'ONLN ONLINE';\n\n/**\n * Determines whether a class in closed or not.\n * @param {ClassInfo} classInfo the ClassInfo object to check.\n */\nconst isClosed = (classInfo) => classInfo.classes.some((value) => value.date.is_closed);\n\n/**\n * Formats data for use in back-end.\n * @param {CurrentCourse[]} currentCourses the list of current courses.\n * @param {number[]} currentClasses the list of current class numbers.\n * @param {ClassInfo[][]} courseInfo the courses information obtained from API.\n */\nconst formatPostData = (currentCourses, currentClasses, courseInfo) => {\n  const currentCoursesDict = _.keyBy(currentCourses, 'courseCode');\n\n  const filteredCourseInfo = courseInfo.map((course) => {\n    let filtered = course.filter((s) => !isClosed(s) && !isOnline(s));\n    const keepUnchanged = currentCoursesDict[getCourseCode(course[0])].keep;\n    if (keepUnchanged) {\n      filtered = filtered.filter((section) => currentClasses.includes(section.class_number));\n    }\n    const filteredSet = _.uniqWith(filtered, (a, b) => {\n      if (a.associated_class !== b.associated_class) {\n        return false;\n      }\n      if (a.section.slice(0, 3) !== b.section.slice(0, 3)) {\n        return false;\n      }\n      if (a.classes.length !== b.classes.length) {\n        return false;\n      }\n      for (let i = 0; i < a.classes.length; i += 1) {\n        if (!_.isEqual(a.classes[i].date, b.classes[i].date)) {\n          return false;\n        }\n      }\n      return true;\n    });\n    return filteredSet;\n  });\n\n  const grouped = filteredCourseInfo.map((course) => {\n    const dict = _.groupBy(course, (s) => s.section[4]);\n    const groupedSectionList = [];\n    _.forEach(dict, (value, key) => {\n      groupedSectionList[key] = value;\n    });\n    return groupedSectionList;\n  });\n\n  const associatedClassList = grouped.map((course) => {\n    const primary = course[0];\n    const other = course.slice(1);\n    const rearranged = primary.map((primarySection) => {\n      const allowedComponents = other.map((component) => {\n        let allowedSections = component.filter(\n          (section) => areAssociated(primarySection, section),\n        );\n        if (_.isEmpty(allowedSections)) {\n          allowedSections = component.filter((section) => section.associated_class === 99);\n        }\n        return _.map(allowedSections, 'class_number');\n      });\n      return [[primarySection.class_number]].concat(allowedComponents);\n    });\n    return rearranged;\n  });\n\n  return {\n    courses_info: filteredCourseInfo,\n    filtered_courses: associatedClassList,\n  };\n};\n\nexport {\n  areAssociated,\n  getCourseCode,\n  formatPostData,\n};\n","import React from 'react';\nimport {\n  Button, TextField, Typography, Grid, Link,\n  Card, CardContent, CardHeader, CardMedia, CardActions,\n  CssBaseline, Snackbar, InputAdornment, Backdrop, createMuiTheme,\n  ThemeProvider, Box, CircularProgress, Dialog, DialogActions,\n  DialogContent, DialogTitle, DialogContentText, Container\n} from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { pink } from '@material-ui/core/colors';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport './index.css';\nimport { getCourseCode } from '../utils/courses';\nimport logo from '../res/icon.svg';\nimport step1 from '../res/calendar-step-1.png';\nimport step2 from '../res/calendar-step-2.png';\nimport { Input } from 'reactstrap'\n\nconst apiKey = \"e11fd522920fbd64cb49ecd93464e8a3\";\n\nconst snackbarWarningText = 'Your course info cannot be read. Please try again and make sure the text is not modified.';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: pink[300],\n      dark: '#ba2d65',\n      light: '#ff94c2'\n    },\n  },\n});\n\nclass WelcomePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rawCourses: '',\n      snackbarOpen: false,\n      fullPageOverlayOpen: false,\n      dialogOpen: false,\n      questId: '',\n      courseCodes: '',\n      snackbarTheme: '',\n      snackbarText: '',\n    };\n  }\n\n  validate = (nameFromCode, originalName) => {\n    const sortedUniqueNameFromCode = _.uniq(nameFromCode).sort();\n    const sortedOriginalCode = originalName.sort();\n    if (_.isEqual(sortedUniqueNameFromCode, sortedOriginalCode)) {\n      this.setState({ dialogOpen: true });\n    } else {\n      console.log('original courses and courses from course code do not match');\n      this.showSnackbar('warning', snackbarWarningText);\n    }\n  }\n\n  loadCourseInfo = (courseCodes, courseNames) => {\n    const timeout = 10000;\n    this.setState({ fullPageOverlayOpen: true });\n    const instance = axios.create({\n      baseURL: 'https://api.uwaterloo.ca/v2/courses',\n      timeout,\n    });\n    const promises = courseCodes.map((code) => instance.get(`/${code}/schedule.json`, {\n      params: {\n        key: apiKey,\n      },\n    }));\n    axios.all(promises).then((values) => {\n      const courseInfo = values.map((value) => value.data.data);\n      const subjectNamsFromCourseCodes = courseInfo.map((info) => {\n        const subjectName = getCourseCode(info[0]);\n        return subjectName;\n      });\n      this.setState({ fullPageOverlayOpen: false });\n      if (subjectNamsFromCourseCodes.includes(null)) {\n        console.log('course not found with 4-digit course number');\n        this.showSnackbar('warning', snackbarWarningText);\n      } else {\n        this.validate(subjectNamsFromCourseCodes, courseNames);\n      }\n    }).catch((error) => {\n      if (error.message === `timeout of ${timeout}ms exceeded`) {\n        this.showSnackbar('error', 'Network Timeout. Could be the problem of the server. Please try again later.');\n      } else {\n        this.showSnackbar('error', error.message);\n      }\n      console.log(error);\n      this.setState({ fullPageOverlayOpen: false });\n    });\n  }\n\n  parseCourses = (rawCourses) => {\n    const classNumbers = rawCourses.match(/^\\d{4}$/gm);\n    const courseNames = rawCourses.match(/[A-Z]{2,6} \\d{1,3}[A-Z]? - /g).map((x) => x.substring(0, x.length - 3));\n    if (rawCourses.match(/^\\d{3}$/gm).length !== classNumbers.length) {\n      console.log(\"number of course numbers and catlog numbers doesn't match\");\n      this.showSnackbar('warning', snackbarWarningText);\n      return;\n    }\n    this.setState({ courseCodes: classNumbers.map((x) => parseInt(x, 10)) });\n    this.loadCourseInfo(classNumbers, courseNames);\n  }\n\n  showSnackbar = (snackbarTheme, snackbarText) => {\n    this.setState({ snackbarTheme, snackbarText, snackbarOpen: true });\n  }\n\n  hideSnackbar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    this.setState({ snackbarOpen: false });\n  }\n\n  handleDialogClose = () => {\n    this.hideSnackbar();\n    this.setState({ dialogOpen: false, rawCourses: '' });\n  }\n\n  handleRawCoursesInputChange = (rawCourses) => {\n    this.setState({ rawCourses });\n  }\n\n  handleNextStepClick = () => {\n    this.hideSnackbar();\n    const { rawCourses } = this.state;\n    try {\n      this.parseCourses(rawCourses);\n    } catch (error) {\n      console.log(error);\n      this.showSnackbar('warning', snackbarWarningText);\n    }\n  }\n\n  handleEmailAddressChange = (val) => {\n    this.setState({ questId: val });\n  }\n\n  handleSubmitClick = () => {\n    const timeout = 8000;\n    const { questId, courseCodes } = this.state;\n    if (!questId) {\n      this.showSnackbar('warning', 'Email address cannot be empty!');\n      return;\n    }\n    this.setState({ fullPageOverlayOpen: true });\n    const url = 'https://qemn8c6rx9.execute-api.us-east-2.amazonaws.com/test/handlescheduleinput';\n    axios.post(url, {\n      id: questId,\n      sections: courseCodes,\n    },\n      {\n        timeout,\n      }).then((response) => {\n        console.log(response);\n        this.showSnackbar('success', 'Thank you! We will notify you by email if you win the prize.');\n        this.setState({ fullPageOverlayOpen: false });\n      }).catch((error) => {\n        if (error.message === `timeout of ${timeout}ms exceeded`) {\n          this.showSnackbar('error', 'Network Timeout. Please check your internet connection.');\n        } else {\n          this.showSnackbar('error', error.message);\n        }\n        console.log(error);\n        this.setState({ fullPageOverlayOpen: false });\n      });\n    this.handleDialogClose();\n  }\n\n  handlePaste = (rawCourses) => {\n    this.hideSnackbar();\n    console.log(rawCourses);\n    this.setState({ rawCourses });\n    try {\n      this.parseCourses(rawCourses);\n    } catch (error) {\n      console.log(error);\n      this.showSnackbar('warning', snackbarWarningText);\n    }\n  }\n\n  render() {\n    const {\n      snackbarOpen, fullPageOverlayOpen, dialogOpen, snackbarTheme, snackbarText, rawCourses,\n    } = this.state;\n\n    return (\n      <ThemeProvider theme={theme}>\n        <Box p={2}>\n          <CssBaseline />\n          <Snackbar\n            open={snackbarOpen}\n            onClose={this.hideSnackbar}\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n          >\n            <Alert severity={snackbarTheme} onClose={this.hideSnackbar}>\n              {snackbarText}\n            </Alert>\n          </Snackbar>\n          <img src={logo} alt=\"Logo\" className=\"logo\" />\n            <Grid container justify=\"center\" spacing={5}>\n              <Grid item xs={12} md lg={3}>\n                <Card className=\"card\" raised>\n                  <CardHeader title=\"Step 1\" className=\"header\" />\n                  <CardContent>\n                    <Typography variant=\"body1\">\n                      Go to&nbsp;\n                    <Link href=\"https://quest.pecs.uwaterloo.ca/psp/SS/ACADEMIC/SA/?cmd=login&languageCd=ENG\" target=\"_blank\">Quest</Link>\n                      &nbsp;and click &quot;Class Schedule&quot;.\n                  </Typography>\n                  </CardContent>\n                  <CardMedia\n                    image={step1}\n                    title=\"Go to Class Schedule\"\n                    className=\"step-img\"\n                  />\n                </Card>\n              </Grid>\n              <Grid item xs={12} md lg={3}>\n                <Card className=\"card\" raised style={{display: 'flex', flexDirection: 'column', height: '100%'}}>\n                  <CardHeader title=\"Step 2\" className=\"header\" />\n                  <CardContent>\n                    <Typography variant=\"body1\">Choose your term, select all and copy.</Typography>\n                  </CardContent>\n                  <CardMedia\n                    image={step2}\n                    title=\"Select All and Copy\"\n                    className=\"step-img stick-bottom\"\n                  />\n                </Card>\n              </Grid>\n              <Grid item xs={12} md lg={3}>\n      \n                <Card raised style={{  display: 'flex', flexDirection: 'column', height: '100%' }}>\n                  <CardHeader title=\"Step 3\" className=\"header\" />\n                  <CardContent style={{ display: 'flex', flexDirection: 'column', flexGrow:1 ,paddingBottom: \"16px\" }}>\n                    <Box mb={2}>\n                      <Typography variant=\"body1\">Paste into the box below.</Typography>\n                    </Box>\n                    \n                    <TextField style={{flexGrow:1}}\n                      value={rawCourses}\n                      onPaste={(e) => this.handlePaste(e.clipboardData.getData('text/plain'))}\n                      multiline\n                      required\n                      variant=\"outlined\"\n                      fullWidth\n                      rows={12}\n                      onChange={(e) => this.handleRawCoursesInputChange(e.target.value)}\n                      InputProps={{\n                        style: {\n                          height:\"100%\"\n                        }\n                      }}\n                      inputProps={{\n                        style: {\n                          height:\"100%\"\n                        }\n                      }}\n                    />\n     \n                  </CardContent>\n                </Card>\n              </Grid>\n            </Grid>\n        </Box>\n        <Backdrop\n          style={{\n            zIndex: theme.zIndex.drawer + 1,\n            color: '#fff',\n          }}\n          open={fullPageOverlayOpen}\n        >\n          <CircularProgress color=\"inherit\" />\n        </Backdrop>\n        <Dialog open={dialogOpen} onClose={this.handleDialogClose} aria-labelledby=\"form-dialog-title\">\n          <DialogTitle id=\"form-dialog-title\">Submit</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Please enter your UWaterloo ID for a chance win a prize!\n                        </DialogContentText>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Email Address\"\n              fullWidth\n              InputProps={{ endAdornment: <InputAdornment position=\"end\">@uwaterloo.ca</InputAdornment> }}\n              onChange={(e) => this.handleEmailAddressChange(e.target.value)}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleDialogClose} color=\"primary\">\n              Cancel\n                        </Button>\n            <Button onClick={this.handleSubmitClick} color=\"primary\">\n              Submit\n                        </Button>\n          </DialogActions>\n        </Dialog>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default WelcomePage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport WelcomePage from './welcome_page/index';\n\nReactDOM.render(<WelcomePage />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/icon.a7b1598b.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar-step-1.5a0cc442.png\";","module.exports = __webpack_public_path__ + \"static/media/calendar-step-2.514203ac.png\";"],"sourceRoot":""}